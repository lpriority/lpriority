package com.lp.model;

import static javax.persistence.GenerationType.IDENTITY;

import java.util.ArrayList;
import java.util.List;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;
import javax.persistence.Transient;

import com.fasterxml.jackson.annotation.JsonManagedReference;

/**
 * SubInterest generated by hbm2java
 */
@SuppressWarnings("serial")
@Entity
@Table(name = "fluency_marks")
public class FluencyMarks implements java.io.Serializable {
	
	

	private Long fluencyMarksId;
	@JsonManagedReference
	private AssignmentQuestions assignmentQuestions;
	@JsonManagedReference
	private GradingTypes gradingTypes;
	@JsonManagedReference
	private ReadingTypes readingTypes;
	private Integer wordsRead;
	private Integer countOfErrors;
	private Integer marks;
	private Float accuracyScore;
	private String comment;
	@JsonManagedReference
	private QualityOfResponse qualityOfResponse;
	private List<FluencyAddedWords> fluencyAddedWordsLt = new ArrayList<FluencyAddedWords>();
	private List<FluencyMarksDetails> fluencyMarksDetails=new ArrayList<FluencyMarksDetails>();
	private Integer wcpm;
	
	public FluencyMarks() {
	}

	public FluencyMarks(long fluencyMarksId, AssignmentQuestions assignmentQuestions,ReadingTypes readingTypes) {
		this.fluencyMarksId = fluencyMarksId;
		this.assignmentQuestions = assignmentQuestions;
		this.readingTypes = readingTypes;
	}
	public FluencyMarks(long fluencyMarksId, AssignmentQuestions assignmentQuestions, GradingTypes gradingTypes, ReadingTypes readingTypes,
			Integer marks,Float accuracyScore,Integer countOfErrors,String errorsAddress, Integer wordsRead, QualityOfResponse qualityOfResponse, Student peerReviewBy,String comment, Integer wcpm) {
		this.fluencyMarksId = fluencyMarksId;
		this.assignmentQuestions = assignmentQuestions;
		this.gradingTypes = gradingTypes;
		this.readingTypes = readingTypes;
		this.marks = marks;
		this.accuracyScore=accuracyScore;
		this.countOfErrors = countOfErrors;
		this.wordsRead = wordsRead;
		this.qualityOfResponse = qualityOfResponse;
		this.comment=comment;	
		this.wcpm=wcpm;
	}

	
	@Id
	@GeneratedValue(strategy = IDENTITY)
	@Column(name = "fluency_marks_id", unique = true, nullable = false)
	public Long getFluencyMarksId() {
		return fluencyMarksId;
	}

	public void setFluencyMarksId(Long fluencyMarksId) {
		this.fluencyMarksId = fluencyMarksId;
	}
	@ManyToOne(fetch = FetchType.EAGER)
	@JoinColumn(name = "assignment_questions_id", nullable = false)
	public AssignmentQuestions getAssignmentQuestions() {
		return assignmentQuestions;
	}

	public void setAssignmentQuestions(AssignmentQuestions assignmentQuestions) {
		this.assignmentQuestions = assignmentQuestions;
	}
	@ManyToOne(fetch = FetchType.EAGER)
	@JoinColumn(name = "grading_type_id", nullable = false)
	public GradingTypes getGradingTypes() {
		return gradingTypes;
	}

	public void setGradingTypes(GradingTypes gradingTypes) {
		this.gradingTypes = gradingTypes;
	}
	@ManyToOne(fetch = FetchType.EAGER)
	@JoinColumn(name = "reading_type_id", nullable = false)
	public ReadingTypes getReadingTypes() {
		return readingTypes;
	}
	public void setReadingTypes(ReadingTypes readingTypes) {
		this.readingTypes = readingTypes;
	}
	@Column(name = "words_read")
	public Integer getWordsRead() {
		return wordsRead;
	}

	public void setWordsRead(Integer wordsRead) {
		this.wordsRead = wordsRead;
	}
	
	@Column(name = "count_of_errors")
	public Integer getCountOfErrors() {
		return countOfErrors;
	}

	public void setCountOfErrors(Integer countOfErrors) {
		this.countOfErrors = countOfErrors;
	}
	
	@Column(name = "marks")
	public Integer getMarks() {
		return marks;
	}

	public void setMarks(Integer marks) {
		this.marks = marks;
	}
	@Column(name = "accuracy_score", precision = 12, scale = 0)
	public Float getAccuracyScore() {
		return accuracyScore;
	}

	public void setAccuracyScore(Float accuracyScore) {
		this.accuracyScore = accuracyScore;
	}
	
	@ManyToOne(fetch = FetchType.EAGER)
	@JoinColumn(name = "quality_of_response_id")
	public QualityOfResponse getQualityOfResponse() {
		return this.qualityOfResponse;
	}

	public void setQualityOfResponse(QualityOfResponse qualityOfResponse) {
		this.qualityOfResponse = qualityOfResponse;
	}
    @Transient
	public List<FluencyAddedWords> getFluencyAddedWordsLt() {
		return fluencyAddedWordsLt;
	}

	public void setFluencyAddedWordsLt(List<FluencyAddedWords> fluencyAddedWordsLt) {
		this.fluencyAddedWordsLt = fluencyAddedWordsLt;
	}
	@Transient
	public List<FluencyMarksDetails> getFluencyMarksDetails() {
    	return fluencyMarksDetails;
	}
	public void setFluencyMarksDetails(List<FluencyMarksDetails> fluencyMarksDetails) {
		this.fluencyMarksDetails = fluencyMarksDetails;
	}
	@Column(name = "comment")
	public String getComment() {
		return comment;
	}

	public void setComment(String comment) {
		this.comment = comment;
	}
	@Column(name = "wcpm")
	public Integer getWcpm() {
		return wcpm;
	}

	public void setWcpm(Integer wcpm) {
		this.wcpm = wcpm;
	}

}
