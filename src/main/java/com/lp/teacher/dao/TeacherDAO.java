package com.lp.teacher.dao;

import java.util.Date;
import java.util.List;

import com.lp.custom.exception.DataException;
import com.lp.model.AcademicYear;
import com.lp.model.AdminTeacherReports;
import com.lp.model.Assignment;
import com.lp.model.AssignmentQuestions;
import com.lp.model.BenchmarkResults;
import com.lp.model.ClassActualSchedule;
import com.lp.model.ClassStatus;
import com.lp.model.FluencyAddedWords;
import com.lp.model.FluencyErrorTypes;
import com.lp.model.FluencyMarksDetails;
import com.lp.model.HomeroomClasses;
import com.lp.model.LessonPaths;
import com.lp.model.Periods;
import com.lp.model.RegisterForClass;
import com.lp.model.School;
import com.lp.model.Section;
import com.lp.model.Student;
import com.lp.model.StudentAssignmentStatus;
import com.lp.model.StudentClass;
import com.lp.model.Teacher;
import com.lp.model.TeacherPerformances;
import com.lp.model.TeacherReports;
import com.lp.model.TeacherSubjects;
import com.lp.model.User;
import com.lp.model.UserRegistration;

public interface TeacherDAO {
	public boolean saveTeacher(Teacher teacher);
	public List<Teacher> getTeachers(long gradeId, long classId);
	public List<UserRegistration> getTeachersByReg(long schoolId, long userTypeId);
	public List<TeacherPerformances> getTeacherPerformances();
	public TeacherPerformances getTeacherPerformance(long performanceId);
	public Teacher getTeacher(long teacherregId);
	public boolean saveTeacherPerformances(TeacherReports teacherreports);
	public UserRegistration getAdminUserRegistration(School school);
	public List<TeacherReports> getTeacherReports(User user,Teacher teacher);
	public List<ClassStatus> getTeachersBySchoolId(School school);
	public List<AdminTeacherReports> getTeacherSelfReportDates(long teacherId);
	public List<Teacher> getAllTeachers();
	public boolean saveAdminTeacherReports(AdminTeacherReports adminteacherreports);
	public List<TeacherReports> getTeacherReportsByDate(Teacher teacher,String reportDate);
	public Teacher getTeacherbyTeacherId(long teacherId);
	public List<Teacher> saveTeachers(List<Teacher> teachers);
	public List<Section> getSections(long gradeId, long classId);
	public List<ClassActualSchedule> getCSIds(long gradeId, long classId,long teacherId, long schoolId);
	public long setClassStatus(long sectionId, long teacherId,String status,Date startDate,Date endDate,long casId);
	public boolean setClassActualStatus(long casId,long csId, long dayId,long periodId,long sectionId,long teacherId);
	public List<Student> getStudentsBySection(long csId);
	public boolean checkTeacherAvailability(long gradeId, long classId, long teacherId, long dayId,Periods period);
	public boolean checkSectionAvailabilityforTeacher(long sectionId, long teacherId);
	public List<RegisterForClass> getStudentsByCsId(long csId);
	public List<RegisterForClass> getStudentsByCsIdAndRtiGroup(long csId, long rtiGroupId);
	public List<TeacherSubjects> getTeachersRequests(long schoolId);
	public boolean setTeacherReplyAction(long gradeId, long classId, long teacherId,String status);
	public List<Assignment> getBenchmarkDates(Teacher teacher, long csId, String usedFor);
	public List<BenchmarkResults> getBenchmarkResults(Teacher teacher, long csId, String usedFor,String dateAssigned,long assignmentId);
	public String getRTIGroupName(long studentId,long csId);
	public List<StudentClass> getStudentClasses(long gradeId);
	public List<ClassStatus> getClassStatus(long gradeId, long classId, long teacherId);
	public void setClassStatusAsExpired(ClassStatus classStatus);
	public void setLessonPath(LessonPaths lessonPaths);
	public boolean getSelfEvaluation(long teacherId, long userTypeid,String date) throws DataException;
	public String checkHomeRoomTeacher(HomeroomClasses hrc) throws DataException;
	public List<LessonPaths> getLessonPathByLessonId(long lessonId);
	public boolean deleteLessonPath(long lessonId,String lessonPath);
	public AssignmentQuestions getAssignmentQuestions(long studentAssignmentId);
	public List<String> getErrorAddressList(long studentAssignmentId);
	public List<FluencyMarksDetails> getErrorWordCount(long assignmentId);
	public List<StudentAssignmentStatus> getStudentAssignmentStatusList(long assignmentId);
	public List<String> getSkippedWordList(long studentAssignmentId);
	public List<FluencyAddedWords> getAddedWordCount(long assignmentId,long type);
	public List<String> getAddedWordList(long studentAssignmentId,long type);
	public List<FluencyErrorTypes> getFluencyErrorTypes();
	public List<String> getUnknownWordList(long studentAssignmentId);	
	public UserRegistration getAppAdminUserRegistration();	
	public List<Student> getAllStudentsByAssignmentId(long assignemntId);
	public List<Assignment> getAccuracyDates(long csId, String usedFor);
	public List<Teacher> getTeachersByYear(School school, AcademicYear academicYear);

}
